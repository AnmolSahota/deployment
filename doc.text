workflowsAbsolutely! Let’s create a **detailed, beginner-friendly CI/CD documentation** that not only explains your workflow but also teaches **how CI/CD works in general** using GitHub Actions. It will be written in a way anyone can understand and apply to any project.

---

# **CI/CD with GitHub Actions – Complete Guide**

## **1️⃣ What is CI/CD?**

**CI/CD** stands for:

* **Continuous Integration (CI):** Automatically building and testing your code every time you push changes to a repository.
* **Continuous Deployment (CD):** Automatically deploying your application to a server or cloud environment whenever changes are pushed to a branch (usually `master` or `main`).

**Why use CI/CD?**

* Reduces manual deployment steps.
* Ensures code changes are automatically tested and deployed.
* Minimizes errors and downtime.
* Speeds up development and release cycles.

---

## **2️⃣ How GitHub Actions Fits In**

GitHub Actions is a **CI/CD tool built into GitHub** that allows you to automate tasks such as:

* Building your code
* Running tests
* Deploying to servers or cloud providers

**Key concepts:**

* **Workflow:** A YAML file describing automation steps. Stored in `.github/workflows/` folder.
* **Job:** A set of steps executed together in a workflow.
* **Step:** A single task, like installing dependencies or running a script.
* **Runner:** The machine where the workflow runs (GitHub provides virtual machines like `ubuntu-latest`).
* **Secrets:** Sensitive information (like server IP, SSH keys) stored safely in GitHub.

> Only **files inside `.github/workflows/`** are checked by GitHub Actions for workflows. Each workflow file (`.yml`) defines a pipeline.

---

## **3️⃣ Anatomy of a GitHub Actions Workflow**

Every workflow file has three main sections:

### **A. Name**

```yaml
name: CI/CD Deployment
```

* Defines the workflow name.
* Appears in GitHub Actions tab for easy identification.

### **B. Trigger**

```yaml
on:
  push:
    branches:
      - master
```

* Specifies **when the workflow runs**.
* In this example, it runs **only when changes are pushed to the `master` branch**.
* Other triggers: pull requests, schedules, tags, etc.

### **C. Jobs**

```yaml
jobs:
  deploy:
    runs-on: ubuntu-latest
```

* **Job name:** `deploy`.
* **runs-on:** Specifies the operating system of the runner.
* Jobs contain **steps** — individual tasks to execute.

---

## **4️⃣ Common Steps in a Deployment Pipeline**

### **Step 1: Checkout Repository**

```yaml
- name: Checkout code
  uses: actions/checkout@v3
```

* Pulls the latest code from GitHub into the runner.
* Without this, your workflow has no code to work on.

---

### **Step 2: Setup Environment**

```yaml
- name: Setup Node.js
  uses: actions/setup-node@v3
  with:
    node-version: "18"
```

* Installs Node.js for building or running your project.
* Each workflow runs in a **fresh virtual machine**, so dependencies must be installed each time.

---

### **Step 3: Install Dependencies & Build**

```yaml
- name: Install dependencies and build React
  run: |
    cd server
    npm install
    cd ../client
    npm install
    npm run build
```

* Installs backend and frontend dependencies.
* Builds frontend (React) for production.
* Ensures the code is ready for deployment.

> This step can also include **tests** to ensure your code works before deploying.

---

### **Step 4: Deploy to Server**

```yaml
- name: Deploy to EC2
  uses: appleboy/ssh-action@v0.1.9
  with:
    host: ${{ secrets.EC2_HOST }}
    username: ${{ secrets.EC2_USER }}
    key: ${{ secrets.EC2_KEY }}
    script: |
      cd /home/ec2-user/www/deployment
      git reset --hard
      git pull origin master
      cd server
      npm install
      pm2 restart backend || pm2 start index.js --name backend
      cd ../client
      npm install
      npm run build
```

* SSH into the EC2 server using secrets stored securely.
* Pulls the latest code.
* Installs backend dependencies and restarts the backend via PM2.
* Rebuilds frontend to ensure new React changes are deployed.

> Using secrets ensures **no sensitive information is exposed in your repository**.

---

## **5️⃣ GitHub Secrets**

* Store sensitive information like SSH keys, passwords, or API tokens.
* Example for EC2 deployment:

  | Secret Name | Description                |
  | ----------- | -------------------------- |
  | EC2\_HOST   | Public IP of EC2 instance  |
  | EC2\_USER   | SSH username (`ec2-user`)  |
  | EC2\_KEY    | Private key for SSH access |

> Never commit private keys directly to the repository.

---

## **6️⃣ Folder & Path Considerations**

* Workflows should use **absolute paths on server** to avoid “No such file or directory” errors.
* Example EC2 folder structure:

```
/home/ec2-user/www/deployment
├─ server/
│   └─ package.json
├─ client/
│   └─ package.json
├─ .git/
```

* Backend code in `server/`.
* Frontend code in `client/`.
* React build stored in `client/build`.

---

## **7️⃣ CI/CD Flow – Visualized**

1. Developer pushes code → GitHub Actions workflow triggers.
2. GitHub runner:

   * Checks out code
   * Installs dependencies
   * Builds frontend (optional test)
3. Runner SSHs into EC2:

   * Pulls latest code
   * Installs backend dependencies
   * Restarts backend with PM2
   * Builds frontend on EC2 (ensures latest React changes)
4. Both backend and frontend are updated automatically.

---

## **8️⃣ Benefits of This Approach**

* Fully automated deployment → no manual steps.
* Safe — EC2 only runs production-ready code.
* Supports both backend and frontend updates.
* Easy to extend for tests, staging, or multiple environments.
* Uses industry best practices: **CI builds → CD deploys**.

---

## **9️⃣ Best Practices**

* Use **secrets** for all sensitive information.
* Keep workflows in **`.github/workflows/`** folder — GitHub only checks this location.
* Always use **absolute paths on server**.
* Optional: build frontend on runner and **copy build to EC2** for faster deployments.
* Monitor PM2 logs on EC2 for backend health:

```bash
pm2 logs backend
```

---

## **10️⃣ References / Learning Resources**

* [GitHub Actions Documentation](https://docs.github.com/en/actions)
* [PM2 Process Manager](https://pm2.keymetrics.io/)
* [React Deployment Best Practices](https://create-react-app.dev/docs/deployment/)
* [Amazon EC2 Documentation](https://docs.aws.amazon.com/ec2/index.html)

---

### ✅ **Conclusion**

* CI/CD ensures code changes **automatically go through build and deployment steps**.
* GitHub Actions makes it easy to **automate builds, tests, and deployment**.
* This workflow teaches how to **connect GitHub, EC2, Node.js, and PM2** in a real deployment scenario.

---

I can also **create a visual diagram for this pipeline**, showing **runner vs EC2 actions**, which makes it very easy for anyone learning CI/CD to understand at a glance.

Do you want me to do that diagram?
